const puppeteer = require("puppeteer");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

// H√†m t·∫£i ·∫£nh v·ªÅ th∆∞ m·ª•c
const downloadImage = async (url, folder, filename) => {
    try {
        const response = await axios({
            url,
            responseType: "stream"
        });

        if (!fs.existsSync(folder)) {
            fs.mkdirSync(folder, { recursive: true });
        }

        const filePath = path.join(folder, filename);
        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);

        return new Promise((resolve, reject) => {
            writer.on("finish", () => {
                console.log(`‚úÖ T·∫£i th√†nh c√¥ng: ${filename}`);
                resolve();
            });
            writer.on("error", reject);
        });
    } catch (error) {
        console.error(`‚ùå L·ªói t·∫£i ·∫£nh ${filename}:`, error.message);
    }
};

// H√†m thu th·∫≠p v√† t·∫£i ·∫£nh s·∫£n ph·∫©m
const scrapeProductImages = async (productUrl, productFolder) => {
    let browser;
    try {
        browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();

        console.log(`üîç ƒêang truy c·∫≠p: ${productUrl}`);
        await page.goto(productUrl, { waitUntil: "networkidle2" });

        // T√¨m ·∫£nh ch√≠nh v√† ·∫£nh ph·ª•
        const imageUrls = await page.evaluate(() => {
            let images = [];

            // ·∫¢nh ch√≠nh
            const mainImage = document.querySelector(".product-view-image-product .fhs_img_frame_container img");
            if (mainImage) images.push(mainImage.src);

            // ·∫¢nh ph·ª• (gallery, thumbnails)
            const extraImages = Array.from(document.querySelectorAll(".lightgallery img, .include-in-gallery img"))
                .map(img => img.src);
            images = images.concat(extraImages);

            return images.filter(url => url); // Lo·∫°i b·ªè ·∫£nh null
        });

        console.log(`üì∏ T√¨m th·∫•y ${imageUrls.length} ·∫£nh`);

        if (imageUrls.length === 0) {
            throw new Error("Kh√¥ng t√¨m th·∫•y ·∫£nh s·∫£n ph·∫©m.");
        }

        // T·∫°o th∆∞ m·ª•c con image trong th∆∞ m·ª•c s·∫£n ph·∫©m
        const imagesFolderPath = path.join(productFolder, "images");
        if (!fs.existsSync(imagesFolderPath)) {
            fs.mkdirSync(imagesFolderPath, { recursive: true });
        }

        // T·∫£i ·∫£nh v·ªÅ v√†o th∆∞ m·ª•c ·∫£nh
        for (let i = 0; i < imageUrls.length; i++) {
            const ext = path.extname(new URL(imageUrls[i]).pathname).split("?")[0] || ".jpg";
            await downloadImage(imageUrls[i], imagesFolderPath, `image_${i + 1}${ext}`);
        }

        console.log(`üéâ Ho√†n t·∫•t! ·∫¢nh ƒë∆∞·ª£c l∆∞u t·∫°i: ${imagesFolderPath}`);

        // Thu th·∫≠p th√™m th√¥ng tin s·∫£n ph·∫©m
        const productInfo = await page.evaluate(() => {
            const title = document.querySelector(".fhs_name_product_desktop")?.innerText.trim();

            // L·∫•y gi√° s·∫£n ph·∫©m hi·ªán t·∫°i
            const price = document.querySelector(".price-box .special-price .price")?.innerText.trim();

            // L·∫•y gi√° c≈©
            const oldPrice = document.querySelector(".price-box .old-price .price")?.innerText.trim();

            // L·∫•y ph·∫ßn trƒÉm gi·∫£m gi√°
            const discount = document.querySelector(".price-box .old-price .discount-percent")?.innerText.trim();

            const quantity = document.querySelector(".btn-subtract-qty")?.innerText.trim();
            const productDetails = document.querySelector(".block-content-product-detail.block-info-detail-mobile")?.innerText.trim();
            const description = document.querySelector(".block-content-product-detail.block-info-detail-2-mobile")?.innerText.trim();

            return {
                title,
                price,
                oldPrice,
                discount,
                quantity,
                productDetails,
                description
            };
        });

        console.log(`üìÑ Th√¥ng tin s·∫£n ph·∫©m: `);
        console.log(productInfo);

        // L∆∞u th√¥ng tin s·∫£n ph·∫©m v√†o file JSON trong th∆∞ m·ª•c s·∫£n ph·∫©m
        const jsonFilePath = path.join(productFolder, "product.json");
        fs.writeFileSync(jsonFilePath, JSON.stringify(productInfo, null, 2), "utf-8");
        console.log(`‚úÖ ƒê√£ l∆∞u th√¥ng tin s·∫£n ph·∫©m v√†o file ${jsonFilePath}`);

        return productInfo; // Tr·∫£ v·ªÅ th√¥ng tin s·∫£n ph·∫©m

    } catch (error) {
        console.error("‚ùå L·ªói x·∫£y ra:", error.message);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
};

// H√†m qu√©t th√¥ng tin s·∫£n ph·∫©m t·ª´ nhi·ªÅu li√™n k·∫øt
const scrapeMultipleProducts = async (productUrls) => {
    for (const [index, url] of productUrls.entries()) {
        const productFolder = path.join(__dirname, `sanpham${index + 1}`);
        if (!fs.existsSync(productFolder)) {
            fs.mkdirSync(productFolder, { recursive: true });
        }

        // Thu th·∫≠p v√† l∆∞u ·∫£nh, th√¥ng tin s·∫£n ph·∫©m v√†o th∆∞ m·ª•c ri√™ng
        await scrapeProductImages(url, productFolder);
    }

    console.log("üéâ Ho√†n t·∫•t qu√° tr√¨nh thu th·∫≠p th√¥ng tin t·∫•t c·∫£ s·∫£n ph·∫©m!");
};

// üü¢ Thay danh s√°ch c√°c li√™n k·∫øt s·∫£n ph·∫©m c·∫ßn qu√©t
const productLinks = [
    "https://www.fahasa.com/nguoi-dan-ong-mang-ten-ove-tai-ban.html?fhs_campaign=CATEGORY",
    "https://www.fahasa.com/goc-nho-co-nang.html?fhs_campaign=CATEGORY"
    // Th√™m c√°c li√™n k·∫øt kh√°c v√†o ƒë√¢y
];

// L·∫•y th√¥ng tin v√† t·∫£i ·∫£nh cho t·∫•t c·∫£ s·∫£n ph·∫©m
scrapeMultipleProducts(productLinks);
