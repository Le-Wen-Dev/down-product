const puppeteer = require("puppeteer");
const fs = require("fs");

const scrapeProductLinks = async (categoryUrl, maxPages = 5) => {
    let browser;
    try {
        browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();

        let productLinks = [];
        let currentPage = 1;

        while (currentPage <= maxPages) {
            console.log(`üîç ƒêang qu√©t trang ${currentPage}: ${categoryUrl}`);

            await page.goto(categoryUrl, { waitUntil: "networkidle2" });

            // L·∫•y t·∫•t c·∫£ link c√≥ class 'product-image'
            const links = await page.evaluate(() => {
                return Array.from(document.querySelectorAll("a.product-image"))
                    .map(a => a.href) // L·∫•y thu·ªôc t√≠nh href
                    .filter(href => href.startsWith("http")); // L·ªçc link h·ª£p l·ªá
            });

            console.log(`‚úÖ T√¨m th·∫•y ${links.length} link s·∫£n ph·∫©m`);
            productLinks = productLinks.concat(links);

            // T·∫°o URL cho c√°c trang ti·∫øp theo (tƒÉng t·ª´ currentPage)
            const nextPageUrl = `${categoryUrl}?p=${currentPage + 1}`;

            // Chuy·ªÉn ƒë·∫øn trang ti·∫øp theo
            categoryUrl = nextPageUrl;  // C·∫≠p nh·∫≠t URL ƒë·ªÉ chuy·ªÉn sang trang ti·∫øp theo

            currentPage++;
        }

        // L∆∞u v√†o file JSON
        fs.writeFileSync("product_links.json", JSON.stringify(productLinks, null, 2));
        console.log("üìÇ ƒê√£ l∆∞u danh s√°ch link s·∫£n ph·∫©m v√†o product_links.json");

        return productLinks;

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y link s·∫£n ph·∫©m:", error.message);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
};

// üü¢ Thay link trang danh m·ª•c s·∫£n ph·∫©m c·∫ßn qu√©t
const categoryPage = "https://www.fahasa.com/sach-trong-nuoc.html";

scrapeProductLinks(categoryPage, 10);
