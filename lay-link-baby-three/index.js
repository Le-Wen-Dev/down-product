const puppeteer = require("puppeteer");
const fs = require("fs");

const scrapeProductLinks = async (categoryUrl, maxPages = 5) => {
    let browser;
    try {
        browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();

        let productLinks = [];
        let currentPage = 1;
        let fileIndex = 1; // Kh·ªüi t·∫°o ch·ªâ s·ªë file

        while (currentPage <= maxPages) {
            console.log(`üîç ƒêang qu√©t trang ${currentPage}: ${categoryUrl}`);

            // ƒêi ƒë·∫øn trang k·∫øt qu·∫£ t√¨m ki·∫øm
            await page.goto(categoryUrl, { waitUntil: "domcontentloaded" });

            // ƒê·ª£i c√°c ph·∫ßn t·ª≠ 'a.product-image' c√≥ m·∫∑t tr√™n trang
            await page.waitForSelector(".product.images-container a", { visible: true });

            // L·∫•y t·∫•t c·∫£ link c√≥ class 'product-image' t·ª´ th·∫ª <a>
            const links = await page.evaluate(() => {
                return Array.from(document.querySelectorAll(".product.images-container a"))
                    .map(a => {
                        const relativeUrl = a.getAttribute('href'); // L·∫•y URL t∆∞∆°ng ƒë·ªëi
                        // Chuy·ªÉn ƒë·ªïi th√†nh URL tuy·ªát ƒë·ªëi
                        return new URL(relativeUrl, window.location.origin).href;
                    })
                    .filter(href => href.startsWith("http")); // ƒê·∫£m b·∫£o ch·ªâ l·∫•y c√°c link h·ª£p l·ªá
            });

            console.log(`‚úÖ T√¨m th·∫•y ${links.length} link s·∫£n ph·∫©m`);

            // G·ªôp c√°c link t√¨m ƒë∆∞·ª£c v√†o danh s√°ch hi·ªán t·∫°i m√† kh√¥ng ghi ƒë√®
            productLinks = [...productLinks, ...links]; // Ho·∫∑c productLinks = productLinks.concat(links);

            // T·∫°o URL cho c√°c trang ti·∫øp theo (tƒÉng t·ª´ currentPage)
            const nextPageUrl = `${categoryUrl}?p=${currentPage + 1}`;

            // C·∫≠p nh·∫≠t URL ƒë·ªÉ qu√©t trang ti·∫øp theo
            categoryUrl = nextPageUrl;  // C·∫≠p nh·∫≠t URL ƒë·ªÉ chuy·ªÉn sang trang ti·∫øp theo

            currentPage++;
        }

        // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng, n·∫øu c√≥ th√¨ tƒÉng ch·ªâ s·ªë l√™n
        let fileName = `product-link${fileIndex}.json`;

        while (fs.existsSync(fileName)) {
            fileIndex++;
            fileName = `product-link${fileIndex}.json`;
        }

        // L∆∞u v√†o file m·ªõi v·ªõi t√™n ƒë√£ t·∫°o
        fs.writeFileSync(fileName, JSON.stringify(productLinks, null, 2));
        console.log(`üìÇ ƒê√£ l∆∞u danh s√°ch link s·∫£n ph·∫©m v√†o ${fileName}`);

        return productLinks;

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y link s·∫£n ph·∫©m:", error.message);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
};

// üü¢ Thay link trang danh m·ª•c s·∫£n ph·∫©m c·∫ßn qu√©t
const categoryPage = "https://www.fahasa.com/searchengine?q=babythree&size=n_48_n";

scrapeProductLinks(categoryPage, 1);
